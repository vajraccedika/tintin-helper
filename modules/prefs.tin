#nop --
#nop Class Definitions
#nop --

#var prefs-description {Persistent preferences}
#var prefs-help {
Maintains persistent preference choices.\n
Usage:\n
\tshow_prefs - Show all preferences\n
\tpref <setting> <value>\n
}

#nop --
#nop Modloader Stuff
#nop --

#alias prefs-register {
	#if {@isloaded{modloader}} {
		register_module prefs
	} {
		fail_module prefs unknown reason
	}
}

#nop --
#nop Events
#nop --

event_register {set preferences} {prefs} {set_preference {%2} {%3}}

#nop simple toggle routine for on/off;
#alias {toggle} {
    #if {&{toggle[%1]}} {

        #nop Regular toggle, no preference given;
        #if {"%2" == ""} {
            #if {"$toggle[%1]" == "on"} {
                #var toggle[%1] off;
                warn preferences '%1' is now off;
            } {
                #var toggle[%1] on;
                warn preferences '%1' is now on;
            }
        } {
            #switch {"%2"} {
                #case {"on"} {#var toggle[%1] on; info preferences '%1' is now on};
                #case {"off"} {#var toggle[%1] off; info preferences '%1' is now off};
                #default {warn preferences Please specify on or off.}
            }
        }
        _preferences_save
    } {
        warn preferences No toggle option for '%1'
    }
} {9}

#alias {^toggle$} {
    #if { &{toggle} } {
        #foreach {*toggle[%*]} tmp {
            #if {"$toggle[$tmp]" == "on"} {
                #format line {<ddf>%+20s <078>- <cfc>%s} {$tmp} {$toggle[$tmp]};
            } {
                #format line {<ddf>%+20s <078>- <fcc>%s} {$tmp} {$toggle[$tmp]};
            };
            #echo {$line}
        }
    } {
        warn preferences No toggle options set.
    }
} {8}

#alias {^%w on$} {
    #if {&{toggle[%1]}} {
        toggle %1 on;
        info preferences '%1' is now on;
        _preferences_save
    } {
        warn preferences No toggle for %1;
        %1
    }
}
#alias {^%w off$} {
    #if {&{toggle[%1]}} {
        toggle %1 off;
        info preferences '%1' is now on;
        _preferences_save
    } {
        warn preferences No toggle for %1;
        %1
    }
}



#nop pref with no argument gives us all of our preferences
#alias {^pref$} {
    #showme <188>All Preferences<088>;
    event_raise {show preferences}
} {1}

#nop pref with a single argument is the lowest priority (highest value)
#alias {^pref %1} {
    event_raise {show preferences} {%1}
} {9}

#nop pref with two arguments is wanting to set options
#alias {^pref %1 %2} {
    #nop initialize a handler requested flag;
    #class prefs assign #var _pref_set_request 1;
    event_raise {set preferences} {%1} %2;
    #if {$_pref_set_request == 1} {
        warn No preference handler for %1.
    } {
        _preferences_save
    }

}

#alias {pref_handled} {#var _pref_set_request 2}

#alias _preferences_save {
    #if {&preference_file} {
        #class preferences write $db/$preference_file;
    } {
        warn No preference file available (#var preference_file)
    }
}

#alias {^init_pref %1} {
    #class preferences assign _pref_handler[%1]
}

#alias set_preference {
    #if {$_pref_handler[%1]} {
        #class preferences assign #var %1 %2;
        #var _pref_set_request 0
    } {
        warn No preference handler for %1.
    }
}


#nop -- Initialization routines
#if {!&{preference_file}} {
    #info session save;
    init preference_file prefs $info[SESSION][NAME];
}

#class preferences read $db/$preference_file;


#nop vim: syntax=tt