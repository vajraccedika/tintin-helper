#class money kill
#class money open

#nop --
#nop Class Definitions
#nop --

#var nukefire/money-description {Money handling for Nukefire.}
#var nukefire/money-help {
	Keep track of credits on hand, in bank, and total.
}

#nop --
#nop Modloader Stuff
#nop --

#alias nukefire/money-register {
	#if {@isloaded{modloader}} {
		register_module nukefire/money
	} {
		fail_module nukefire/exp unknown reason
	}
}

#event {VARIABLE UPDATED credits[cash]} {
	event_raise updateMoney
}

#event {VARIABLE UPDATED credits[balance]} {
	event_raise updateMoney
}

#event {VARIABLE UPDATED credits[total]} {
	event_raise updateTotalMoney
}

#nop --
#nop Events
#nop --

event_register creditsChange calc_creds {credits_change_calc %2 %3}
event_register {variable MSDP_MONEY} calc_total_creds {calc_total_creds}
event_register {variable MSDP_MONEY} set_cash {set_cash %2}
event_register {variable MSDP_MONEY} money_info {generate_money_info}

#nop --
#nop Actions
#nop --

#action {^[ Con:%s%d ] [ Kills:%s%d ] [ Credits:        \$%s%d ]} {
	#var con %2;
	#var kills %4;
	#var credits[cash] %6;
}

#action {^Your current balance is %d credits.$} {
	#var credits[balance] %1;
}

#action {^You withdraw %d credits.$} {
	event_raise creditsChange withdraw %1
}

#action {^You deposit %d credits.$} {
	event_raise creditsChange deposit %1;
}

#nop --
#nop Alias
#nop --

#alias set_cash {
	#var credits[cash] %1
}

#alias credits_change_calc {
	#nop %0;
	#switch {"%1"} {
		#case {"gain"} {
			#math credits[cash] $credits[cash] + %2
		};
		#case {"loss"} {
			#math credits[cash] $credits[cash] - %2
		};
		#case {"deposit"} {
			#math credits[cash] $credits[cash] - %2;
			#math credits[balance] $credits[balance] + %2
		};
		#case {"withdraw"} {
			#math credits[cash] $credits[cash] + %2;
			#math credits[balance] $credits[balance] - %2
		};
		#default {
			uinfo tools Unknown credits change calc: `%1`.
		}
	};
	generate_money_info
}

#alias {droc %1} {
	drop %1 credits;
	event_raise creditsChange loss %1
}

#alias depall {
	deposit $MSDP_MONEY
}

#alias calc_total_creds {
	#nop %0;
	#math credits[total] $credits[cash] + $credits[balance]
}

#alias generate_money_info {
	#nop %0;
	#format money_info {<Ff0d5a1>Credits:<Ffff>\nü™ô %+6s üè¶ %+5s üí∞ %+5s}
	{@hNum{$MSDP_MONEY}}
	{@hNum{$credits[balance]}}
	{@hNum{$credits[total]}};
	#if @is_alias{display_left_tiles} {display_left_tiles}
}

#alias init_money_info {
	set_left_tile 3 <B5f819d> money_info 2 tile;
	generate_money_info
}

init_money_info

#nop {( 4) A few credits is lying here.
( 3) Several credits is lying here.
( 3) A small packet of credits is lying here.
( 8) A large packet of credits is lying here.
(11) A pile of credits is lying here.
( 6) A large pile of credits is lying here.
( 2) A large heap of credits is lying here.
( 2) A huge mound of credits is lying here.}

#var credits_args {{few|}}
#var credits_args {{A Mountain|A small mountain|A huge mountain|An enormous mound|}}

#class money close