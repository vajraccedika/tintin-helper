#nop --
#nop Class Definitions
#nop --

#var nukefire/combat-description {Combat management for Nukefire}
#var nukefire/combat-help {
	Generates a left panel tile for combat with\n
	enemy lifebar and player position.
}

#nop --
#nop Modloader Stuff
#nop --

#alias nukefire/combat-register {
	#if {@isloaded{modloader}} {
		register_module nukefire/combat
	} {
		fail_module nukefire/combat unknown reason
	}
}

#nop --
#nop Events
#nop --

event_register {variable MSDP_OPPONENT_HEALTH} combat_info {generate_combat_info}
event_register {variable MSDP_OPPONENT_NAME} combat_info {generate_combat_info}
event_register {variable MSDP_POSITION} combat_info {generate_combat_info}
event_register {variable MSDP_POSITION} next_combat {next_combat {}}
event_register mob_kill combat_info {generate_combat_info}
#nop swap join and combat
event_register join a_set_join_delay join_delay
event_register join combat assist_cmd
event_register {variable _queue[combat]} combat {next_combat {%2}}
event_register eval_combat combat {eval_combat {%2} {%3}}
event_register mob_kill w_combat {clear_combat_queue}
event_register mob_kill a_combat {postcombat_spellLock mob_kill}

event_register no_target combat {clear_spellLock {%2}}
event_register skill_fail combat {clear_spellLock {%2}}

#nop --
#nop Toggle
#nop --

init toggle[autodam] preferences on

#nop --
#nop Vars
#nop --

#list no_lag_fails create neural

#var dam_type {hit|hits|slash|slashes|pound|pounds|whip|whips|sting|stings|bludgeon|bludgeons|claw|claws|pierce|pierces|blast|blasts|stab|stabs|hack and slash|hack and slashes|maul|mauls}

#nop these have pattern a - b - with his/her/its adj dam_type
#var hit_type {OBLITERATE|OBLITERATES|EVISCERATE|EVISCERATES|DESTROY| DESTROYS|MUTILATE|MUTILATES|DECIMATE|DECIMATES|MASSACRE|MASSACRES|ROCKS THE HELL OUT OF|WRECKS AND RUINS}
#var hit_adj {deadly|incredibly powerful|ultimate|powerful|demoralizing|unrelenting}
#var low_hit_types {barely|graze|grazes}
#var mid_hit_types {hard|very hard|extremely hard}
#var hit_pron {his|her|its|you|your}
#var hit_pron2 {he|she|it}
#nop lowest hits and RIP need their own action lines


#nop --
#nop Actions
#nop --

#nop trying to walk out of combat
#action {No way!  You're fighting for your life!$} {
	event_raise failed_move combat
}

#nop no target
#action {You can't kill what isn't here.$} {
	event_raise no_target kill
} {4}

#action {A light flashes on: //ERROR: NO TARGET\\} {
	diaLog combat no target;
	event_raise no_target pound
}

#action {Disembowel who!?$} {
	event_raise no_target disembowel
}

#action {You require a target for Neural Overload.$} {
	event_raise no_target neural
}

#action {There are no valid targets to perform a whirlwind strike on.$} {
	event_raise no_target whirlwhind
}

#nop -- failed skill, changes delay
#action {You failed to initiate Neural Overload, and your systems destabilize.$} {
	event_raise skill_fail neural
}

#nop flee
#action {%1 panics and attempts to flee!$} {
	event_raise flee %1
}

#action {You join the fight!$} {
	event_raise join
}

#action {^But nobody is fighting {him|her|it}!$} {
	event_raise fail_assist
}

#nop -- combat lines
#action {%1 assists you!$} {
	event_raise eval_combat {none} {you}
}

#nop big hits
#action {^%1 {$hit_type} %3 with {$hit_pron} {$hit_adj} {$dam_type}{!!|!!!|!!!!!|!!!!!!}$} {
	event_raise eval_combat {%1} {%3};
}
#nop Your hack and slash WRECKS AND RUINS a corrupted penguin!!!!!
#action {^%1 {$dam_type} {$hit_type} %4{|!!|!!!|!!!!!|!!!!!!}$} {
	event_raise eval_combat {%1} {%4};
}

#nop miss
#action {^%1 {miss|misses} %3 with {$hit_pron} {$dam_type}.$} {
	event_raise eval_combat {%1} {%3};
}

#action {^%1 tries to hit you but you easily avoid the blow.} {
	#if {"%1" == "$_dead_mob"} {
		#nop
	}
} {4}

#action {^%1 tries to pierce you but fails miserably.$} {
	#if {"%1" == "$_dead_mob"} {
		#nop
	}
} {4}

#nop barely
#action {^%1 barely {$hit_type} %3 with {$hit_pron} {$dam_type}.$} {
	event_raise eval_combat {%1} {%3};
}

#nop graze
#action {^%1 {graze|grazes} %3 as {$hit_pron2} {$dam_type} %6.$} {
	event_raise eval_combat {%1} {%3};
} {4}

#nop hit
#action {^%1 {$dam_type} %3{| hard| very hard| extremely hard}.$} {
	event_raise eval_combat {%1} {%3}
}

#nop RIP
#action {^%1 {RIP|RIPS} %3 to small fragments with {$hit_pron} {$dam_type}.$} {
	event_raise eval_combat {%1} {%3};
}

#nop DEMOLISH but probably unnecessary
#action {^%1 {DEMOLISH|DEMOLISHES} %3!!!!!!!!$} {
	event_raise eval_combat {%1} {%3};
}

#action {^%1 {slash|slashes} at %2 but {miss|misses}!$} {
	event_raise eval_combat {%1} {%3}
}

#action {^%1 {go|goes} psycho with {$hit_pron} hack and slash and miss %4 completely!} {
	event_raise eval_combat {%1} {%4}
}

#action {^%1 tries to pierce the air instead of fighting %2.$} {
	event_raise eval_combat {%1} {%2}
}

#nop --
#nop Alias
#nop --

#alias join_delay {
	#nop %0;
	#math spellLock { @max{$spellLock;@mpoch{}} + @spellDelay{join}}
}

#alias assist_cmd {
	#nop %0;
	#if {&{skill[combat]}} {
		queueAdd combat $skill[combat]
	}
}

#alias generate_combat_info {
	#nop %0;
	diaLog kills generate combat info called with pos: $MSDP_POSITION;
	#if {"$MSDP_POSITION" == "Fighting"} {
		#math _opp_health_bar $left_panel - 3;
		#math _len_opp_name $_opp_health_bar - 3;
		#math _opp_health @pct{$MSDP_OPPONENT_HEALTH;$MSDP_OPPONENT_HEALTH_MAX}/100.0;
		#var _opp_health @clamp{$_opp_health;0;1};
		#math _opp_health_pct $_opp_health * 100;
		#var _opp_health_pct @int{$_opp_health_pct};

		#format _combat1 {<Ff0d5a1>%s: <Ffff>%.${_len_opp_name}s}
		{‚öîÔ∏è}
		{$MSDP_OPPONENT_NAME};
		#format _combat2 { %s} 
		{@display_progress{$_opp_health;health: $_opp_health_pct;$_opp_health_bar;health}<B5f819d>};
		#list cdebug create {{${_combat1}}} {{${_combat2}}};
		#var cdb2 $_combat2;
	} {

		#format _combat1 {<Ff0d5a1>Position: <Ffff>%s} {$MSDP_POSITION};
		#format _combat2 {<Ff0d5a1>üíÄ: <Ffff>%s} {$_dead_mob}
		{$MSDP_POSITION}
		{$_dead_mob};

	};
	#list combat_info create {{${_combat1}}} {{${_combat2}}};
	#nop #if {@is_alias{display_left_tiles}} {display_left_tiles};
	#if {@is_alias{display_left_info}} {display_left_info}
}

#alias init_combat_info {
	#nop set_left_tile 7 <B5f819d> combat_info 2 tile;
	set_left_info 4 <B5f819d> combat_info 2;
	init _dead_mob -;
 	generate_combat_info
}

#alias next_combat {
	#nop %0;
	#if {"$toggle[autodam]" == "on"} {
		diaLog combat next_combat fired;
		#if {"%1" == "" && "$MSDP_POSITION" == "Fighting"} {
			queueAdd combat $skill[combat]
		}
	}
}

#alias clear_combat_queue {
	#nop %0;
	diaLog combat clearing combat queue;
	#if {&{_queue[combat][]} > 0} {
		#var _queue[combat] {}
	}
}

#alias eval_combat {
	#nop %0;
	diaLog zone Combat evaluator: %0
}

#alias clear_spellLock {
	#nop %0;
	diaLog combat Combat clear spell lock called;
	#if {"%1" != "kill"} {
		#var spellLock @mpoch{}
	}
}

#alias postcombat_spellLock {
	#nop %0;
	#math spellLock_diff spellLock - @mpoch{};
	#if {$spellLock_diff < 1000} {
		diaLog combat SpellLock post-kill less than 1000;
		#math spellLock @mpoch{} + 1000
	}
}

#highlight {ROCKS THE HELL OUT OF} {<188>}
#highlight {MUTILATE{ |S}} {<188>}
#highlight {DECIMATE{ |S}} {<188>}
#highlight {WRECKS AND RUINS} {<188>}
#highlight {DESTROY{ |S}} {<188>}
#highlight {EVISCERATE{ |S}} {<188>}
#highlight {OBLITERATE{ |S}} {<188>}
#highlight {DEMOLISH{ |ES}} {<188>}
#highlight {MASSACRE{ |S}} {<188>}

init_combat_info
